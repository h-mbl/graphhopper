name: Build and Test
on:
  push:
  pull_request:
jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java-version: [ 22 ]
        jvm-config:
          - jvm-config:
              - name: "The Speed Demon 🏎️"
                opts: "-XX:CompilerThreshold=1000"
                desc: "Optimizes frequently used methods by lowering the compilation threshold, improving performance of core routing operations"

              - name: "The Multitasking Octopus 🐙"
                opts: "-XX:+ParallelRefProcEnabled"
                desc: "Enables parallel processing of references during garbage collection, beneficial for applications handling large datasets"

              - name: "The Array Whisperer 🔮"
                opts: "-XX:+OptimizeFill"
                desc: "Enhances array operations performance, crucial for graph algorithms and route calculations"

              - name: "The Cleanup Crew Leader 🧹"
                opts: "-XX:+UseParallelGC"
                desc: "Implements parallel garbage collection for improved throughput in memory-intensive operations"

              - name: "The Memory Detective 🕵️"
                opts: "-XX:+HeapDumpOnOutOfMemoryError"
                desc: "Generates diagnostic heap dumps on OutOfMemoryError, essential for debugging memory issues in production"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
      - name: Cache Maven artifacts
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Cache node
        uses: actions/cache@v3
        with:
          path: web-bundle/node
          key: ${{ runner.os }}-node-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os}}-node-
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: web-bundle/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pom.xml', '**/package.json') }}
          restore-keys: |
            ${{ runner.os}}-node_modules-
      - name: Display JVM Flags Documentation
        run: |
          echo "============================================="
          echo "🚀 Starting JVM Configuration: ${{ matrix.jvm-config.name }}"
          echo "============================================="
          echo "🎯 Mission Description: ${{ matrix.jvm-config.desc }}"
          echo "⚙️ JVM Powers Activated: ${{ matrix.jvm-config.opts }}"
          echo "---------------------------------------------"

          echo "📊 Initializing Performance Metrics..."
          start_time=$(date +%s)
          mem_before=$(free -m | awk '/Mem:/ {print $3}')
          echo "📈 Calculating Performance Metrics..."
           end_time=$(date +%s)
           mem_after=$(free -m | awk '/Mem:/ {print $3}')
           build_time=$((end_time-start_time))
           memory_used=$((mem_after-mem_before))

           echo "BUILD_TIME=$build_time" >> $GITHUB_ENV
           echo "MEMORY_USED=$memory_used" >> $GITHUB_ENV

           unset MAVEN_OPTS

           echo "============================================="
           echo "🎮 Performance Stats"
           echo "============================================="
           echo "⏱️ Build Time: $build_time seconds"
           echo "💾 Memory Used: $memory_used MB"
           echo "---------------------------------------------"

           echo "🎯 Build Status: $([ $build_status -eq 0 ] && echo '✅ SUCCESS' || echo '❌ FAILED')"
           echo "May the garbage collector be ever in your favor! 🎯"
           echo "=============================================\n"

           if [ $build_status -eq 0 ]; then
             echo "🌟 Achievement Unlocked: Successful Build with ${{ matrix.jvm-config.name }}!"
           else
             echo "💔 Mission Failed: We'll get them next time!"
           fi

           exit $build_status
      - name: Build ${{ matrix.java-version }}
        #run: mvn -B clean verify
        #export MAVEN_OPTS="-XX:+PrintFlagsFinal"
        #          xvfb-run mvn -B clean verify -Djavafx.platform=linux jacoco:report -Pcoverage
        #          unset MAVEN_OPTS
        run: |
          echo "============================================="
          echo "🚀 Starting JVM Configuration: ${{ matrix.jvm-config.name }}"
          echo "============================================="
          echo "🎯 Mission Description: ${{ matrix.jvm-config.desc }}"
          echo "⚙️ JVM Powers Activated: ${{ matrix.jvm-config.opts }}"
          echo "---------------------------------------------"
          
          echo "📊 Initializing Performance Metrics..."
          start_time=$(date +%s)
          mem_before=$(free -m | awk '/Mem:/ {print $3}')
          
          echo "🔥 Launching Build Sequence..."
          export MAVEN_OPTS="${{ matrix.jvm-config.opts }}"
          xvfb-run mvn -B clean verify -Djavafx.platform=linux jacoco:report -Pcoverage
          build_status=$?
          
          echo "📈 Calculating Performance Metrics..."
          end_time=$(date +%s)
          mem_after=$(free -m | awk '/Mem:/ {print $3}')
          build_time=$((end_time-start_time))
          memory_used=$((mem_after-mem_before))
          
          echo "BUILD_TIME=$build_time" >> $GITHUB_ENV
          echo "MEMORY_USED=$memory_used" >> $GITHUB_ENV
          
          unset MAVEN_OPTS
          
          echo "============================================="
          echo "🎮 Performance Stats"
          echo "============================================="
          echo "⏱️ Build Time: $build_time seconds"
          echo "💾 Memory Used: $memory_used MB"
          echo "---------------------------------------------"
          
          echo "🎯 Build Status: $([ $build_status -eq 0 ] && echo '✅ SUCCESS' || echo '❌ FAILED')"
          echo "May the garbage collector be ever in your favor! 🎯"
          echo "=============================================\n"
          
          if [ $build_status -eq 0 ]; then
            echo "🌟 Achievement Unlocked: Successful Build with ${{ matrix.jvm-config.name }}!"
          else
            echo "💔 Mission Failed: We'll get them next time!"
          fi
          
          exit $build_status

      - name: Get JaCoCo Coverage
        id: COVERAGE
        run: |
          coverage1=$(python3 config/coverage.py core/target/site/jacoco/jacoco.csv) 
          echo "COVERAGE1=$coverage1" >> $GITHUB_ENV
          coverage2=$(python3 config/coverage.py reader-gtfs/target/site/jacoco/jacoco.csv) 
          echo "COVERAGE2=$coverage2" >> $GITHUB_ENV
          coverage3=$(python3 config/coverage.py web/target/site/jacoco/jacoco.csv) 
          echo "COVERAGE3=$coverage3" >> $GITHUB_ENV
          coverage4=$(python3 config/coverage.py web-api/target/site/jacoco/jacoco.csv) 
          echo "COVERAGE4=$coverage4" >> $GITHUB_ENV
          coverage5=$(python3 config/coverage.py navigation/target/site/jacoco/jacoco.csv) 
          echo "COVERAGE5=$coverage5" >> $GITHUB_ENV
          coverage6=$(python3 config/coverage.py client-hc/target/site/jacoco/jacoco.csv) 
          echo "COVERAGE6=$coverage6" >> $GITHUB_ENV

     
      - name: Fail if coverage has not improved.
        run: |
          threshold1=83.75
          threshold2=46.63
          threshold3=20.45
          threshold4=37.53
          threshold5=81.89
          threshold6=52.88

          if (( $(echo "$COVERAGE1 > $threshold1" | bc -l) )); then
            echo "New coverage for the module core - $COVERAGE1%. Coverage is improved!"
          elif (( $(echo "$COVERAGE2 > $threshold2" | bc -l) )); then
            echo "New coverage for the module reader-gtfs - $COVERAGE2%. Coverage is improved!"
          elif (( $(echo "$COVERAGE3 > $threshold3" | bc -l) )); then
            echo "New coverage for module web - $COVERAGE3%. Coverage is improved!"
          elif (( $(echo "$COVERAGE4 > $threshold4" | bc -l) )); then
            echo "New coverage for module web-api - $COVERAGE4%. Coverage is improved!"
          elif (( $(echo "$COVERAGE5 > $threshold5" | bc -l) )); then
            echo "New coverage for module navigation - $COVERAGE5%. Coverage is improved!"
          elif (( $(echo "$COVERAGE6 > $threshold6" | bc -l) )); then
            echo "New coverage for module client-hc - $COVERAGE6%. Coverage is improved!"
          else
            echo "Coverage is not improved."
            exit 1
          fi
